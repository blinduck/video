{
  "name": "socketio-file-upload",
  "version": "0.4.1",
  "description": "Uploads files to a Node.JS server using Socket.IO",
  "keywords": [
    "upload",
    "uploader",
    "socket",
    "socket.io"
  ],
  "dependencies": {},
  "files": [
    "client.js",
    "client.min.js",
    "server.js",
    "README.md"
  ],
  "main": "server.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/vote539/socketio-file-upload.git"
  },
  "homepage": "https://github.com/vote539/socketio-file-upload",
  "author": {
    "name": "Shane Carr",
    "email": "shane.carr@wustl.edu"
  },
  "license": "X11",
  "readmeFilename": "README.md",
  "scripts": {
    "start": "node server.js"
  },
  "readme": "Socket.IO File Upload\r\n=====================\r\n\r\nThis module provides functionality to upload files from a browser to a Node.JS server that runs Socket.IO.  Throughout the process, if their browser supports WebSockets, the user will not submit a single HTTP request.  Supports Socket.IO 0.9 and 1.0.\r\n\r\nThe intended audience are single-page web apps, but other types of Node.JS projects may benefit from this library.\r\n\r\nSince version 0.4, this module also supports monitoring file upload progress.\r\n\r\nThe module is released under the X11 open-source license.\r\n\r\n## Quick Start\r\n\r\nNavigate to your project directory and run:\r\n\r\n    $ npm install --save socketio-file-upload\r\n\r\nIn your Express app, add the router like this (if you don't use Express, read the docs below):\r\n\r\n```javascript\r\nvar siofu = require(\"socketio-file-upload\");\r\nvar app = express()\r\n    .use(siofu.router)\r\n    .listen(8000);\r\n```\r\n\r\nOn a server-side socket connection, do this:\r\n\r\n```javascript\r\nio.on(\"connection\", function(socket){\r\n    var uploader = new siofu();\r\n    uploader.dir = \"/path/to/save/uploads\";\r\n    uploader.listen(socket);\r\n});\r\n```\r\n\r\nThe client-side script is served at `/siofu/client.js`.  Include it like this:\r\n\r\n```html\r\n<script src=\"/siofu/client.js\"></script>\r\n```\r\n\r\nThe module also supports AMD; see the docs below for more information.\r\n\r\nThen, in your client side app, with this HTML:\r\n\r\n```html\r\n<input type=\"file\" id=\"siofu_input\" />\r\n```\r\n\r\nJust do this in JavaScript:\r\n\r\n```javascript\r\nvar socket = io.connect();\r\nvar uploader = new SocketIOFileUpload(socket);\r\nuploader.listenOnInput(document.getElementById(\"siofu_input\"));\r\n```\r\n\r\nThat's all you need to get started.  For the detailed API, continue reading below.  A longer example is available at the bottom of the readme.\r\n\r\n## Table of Contents\r\n\r\n- [Client-Side API](#client-side-api)\r\n    - [instance.listenOnInput(input)](#instancelistenoninputinput)\r\n    - [instance.listenOnDrop(element)](#instancelistenondropelement)\r\n    - [instance.listenOnSubmit(submitButton, input)](#instancelistenonsubmitsubmitbutton-input)\r\n    - [instance.listenOnArraySubmit(submitButton, input[])](#instancelistenonarraysubmitsubmitbutton-input)\r\n    - [instance.prompt()](#instanceprompt)\r\n    - [instance.submitFiles(files)](#instancesubmitfilesfiles)\r\n    - [instance.destroy()](#instancedestroy)\r\n    - [instance.maxFileSize = null](#instancemaxfilesize--null)\r\n    - [instance.chunkSize = 100 KiB](#instancechunksize--100-kib)\r\n    - [instance.useText = false](#instanceusetext--false)\r\n    - [instance.useBuffer = true](#instanceusebuffer--true)\r\n    - [instance.serializeOctets = false](#instanceserializeoctets--false)\r\n- [Client-Side Events](#events)\r\n    - [choose](#choose)\r\n    - [start](#start)\r\n    - [progress](#progress)\r\n    - [load](#load)\r\n    - [complete](#complete)\r\n    - [error](#error)\r\n- [Server-Side API](#server-side-api)\r\n    - [SocketIOFileUpload.listen(app)](#socketiofileuploadlistenapp)\r\n    - [SocketIOFileUpload.router](#socketiofileuploadrouter)\r\n    - [instance.listen(socket)](#instancelistensocket)\r\n    - [instance.dir = \"/path/to/upload/directory\"](#instancedir--pathtouploaddirectory)\r\n    - [instance.mode = \"0666\"](#instancemode--0666)\r\n    - [instance.maxFileSize = null](#instancemaxfilesize--null-1)\r\n- [Server-Side Events](#events-1)\r\n    - [start](#start-1)\r\n    - [progress](#progress-1)\r\n    - [complete](#complete-1)\r\n    - [saved](#saved)\r\n    - [error](#error)\r\n- [Adding Meta Data](#adding-meta-data)\r\n    - [Client to Server](#client-to-server-meta-data)\r\n    - [Server to Client](#server-to-client-meta-data)\r\n- [Example](#example)\r\n\r\n## Client-Side API\r\n\r\nThe client-side interface is inside the `SocketIOFileUpload` namespace.  Include it with:\r\n\r\n```html\r\n<script src=\"/siofu/client.js\"></script>\r\n```\r\n\r\nIf you're awesome and you use AMD/RequireJS, set up your paths config like this:\r\n\r\n```javascript\r\nrequirejs.config({\r\n    paths: {\r\n        \"SocketIOFileUpload\": \"/siofu/client\",\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\nand then include it in your app like this:\r\n\r\n```javascript\r\ndefine(\"app\", [\"SocketIOFileUpload\"], function(SocketIOFileUpload){\r\n    // ...\r\n});\r\n```\r\n\r\nWhen instantiating an instance of the `SocketIOFileUpload`, pass a reference to your socket.\r\n\r\n```javascript\r\nvar instance = new SocketIOFileUpload(socket);\r\n```\r\n\r\n### Public Properties and Methods\r\n\r\n#### instance.listenOnInput(input)\r\n\r\nWhen the user selects a file or files in the specified HTML Input Element, the library will begin to upload that file or those files.\r\n\r\nJavaScript:\r\n\r\n    instance.listenOnInput(document.getElementById(\"file_input\"));\r\n\r\nHTML:\r\n\r\n    <label>Upload File: <input type=\"file\" id=\"file_input\" /></label>\r\n\r\nAll browsers tested support this method.\r\n\r\n#### instance.listenOnDrop(element)\r\n\r\nWhen the user drags and drops a file or files onto the specified HTML Element, the library will begin to upload that file or those files.\r\n\r\nJavaScript:\r\n\r\n    instance.listenOnDrop(document.getElementById(\"file_drop\"));\r\n\r\nHTML:\r\n\r\n    <div id=\"file_drop\">Drop Files Here</div>\r\n\r\nIn order to work, this method requires a browser that supports the HTML5 drag-and-drop interface.\r\n\r\n#### instance.listenOnSubmit(submitButton, input)\r\n\r\nLike `instance.listenOnInput(input)`, except instead of listening for the \"change\" event on the input element, listen for the \"click\" event of a button.\r\n\r\nJavaScript:\r\n\r\n    instance.listenOnSubmit(document.getElementById(\"my_button\"), document.getElementById(\"file_input\"));\r\n\r\nHTML:\r\n\r\n    <label>Upload File: <input type=\"file\" id=\"file_input\" /></label>\r\n    <button id=\"my_button\">Upload File</button>\r\n\r\n#### instance.listenOnArraySubmit(submitButton, input[])\r\n\r\nA shorthand for running `instance.listenOnSubmit(submitButton, input)` repeatedly over multiple file input elements.  Accepts an array of file input elements as the second argument.\r\n\r\n#### instance.prompt()\r\n\r\nWhen this method is called, the user will be prompted to choose a file to upload.\r\n\r\nJavaScript:\r\n\r\n    document.getElementById(\"file_button\").addEventListener(\"click\", instance.prompt, false);\r\n\r\nHTML:\r\n\r\n    <button id=\"file_button\">Upload File</button>\r\n\r\nUnfortunately, this method does not work in Firefox for security reasons.  Read the code comments for more information.\r\n\r\n#### instance.submitFiles(files)\r\n\r\nCall this method to manually submit a `FileList` object to be uploaded over the socket.  The argument is of type [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList).\r\n\r\n#### instance.destroy()\r\n\r\nUnbinds all events and DOM elements created by this instance of SIOFU.\r\n\r\n**Important Memory Note:** In order to remove the instance of SIOFU from memory, you need to do at least three things:\r\n\r\n1. Remove all `siofu.prompt` event listeners *and then*\r\n2. Call this function *and then*\r\n3. Set this reference (and all references) to the instance to `null`\r\n\r\nFor example, if you created an instance like this:\r\n\r\n    // ...\r\n    var instance = new SocketIOFileUpload(socket);\r\n    myBtn.addEventListener(\"click\", instance.prompt, false);\r\n    // ...\r\n\r\nthen you can remove it from memory like this:\r\n\r\n    myBtn.removeEventListener(\"click\", instance.prompt, false);\r\n    instance.destroy();\r\n    instance = null;\r\n\r\n#### instance.maxFileSize = null\r\n\r\nWill cancel any attempt by the user to upload a file larger than this number of bytes.  An \"error\" event with code 1 will be emitted if such an attempt is made.  Defaults to a value of `null`, which does not enforce a file size limit.\r\n\r\nTo tell the client when they have tried to upload a file that is too large, you can use the following code:\r\n\r\n```javascript\r\nsiofu.addEventListener(\"error\", function(data){\r\n    if (data.code === 1) {\r\n        alert(\"Don't upload such a big file\");\r\n    }\r\n});\r\n```\r\n\r\nFor maximum security, if you set a maximum file size on the client side, you should also do so on the server side.\r\n\r\n#### instance.chunkSize = 100 KiB\r\n\r\nThe size of the file \"chunks\" to be loaded at a time.  This enables you to monitor the upload progress with a progress bar and the \"progress\" event (see below).\r\n\r\nThe default value is 100 KiB, which is specified as\r\n\r\n`instance.chunkSize = 1024 * 100;`\r\n\r\nSetting this parameter to 0 disables chunking of files.\r\n\r\n#### instance.useText = false\r\n\r\nDefaults to `false`, which reads files as an octet array.  This is necessary for binary-type files, like images.\r\n\r\nSet to `true` to read and transmit files as plain text instead.  This will save bandwidth if you expect to transmit only text files.  If you choose this option, it is recommended that you perform a filter by returning `false` to a `start` event if the file does not have a desired extension.\r\n\r\n#### instance.useBuffer = true\r\n\r\nStarting with Socket.IO 1.0, binary data may now be transmitted through the Web Socket.  Begining with SIOFU version 0.3.2 (December 17, 2014), this option is enabled by default.  To support older versions of Socket.IO (e.g. version 0.9.x), set this option to `false`, which transmits files as base 64-encoded strings.\r\n\r\nAdvantages of enabling this option:\r\n\r\n- Less overhead in the socket, since base 64 increases overhead by approximately 33%.\r\n- No serialization and deserialization into and out of base 64 is required on the client and server side.\r\n\r\nDisadvantages of enabling this option:\r\n\r\n- Transmitting buffer types through a WebSocket is not supported in older browsers.\r\n- This option is relatively new in both Socket.IO and Socket.IO File Upload and has not been rigorously tested.\r\n\r\nAs you use this option, [please leave feedback](https://github.com/vote539/socketio-file-upload/issues/16).\r\n\r\n#### instance.serializeOctets = false\r\n\r\n*This method is experimental, and has been deprecated in Socket.IO File Upload as of version 0.3 in favor of instance.useBuffer.*\r\n\r\nDefaults to `false`, which transmits binary files as Base 64 data (with a 33% overhead).\r\n\r\nSet to `true` to instead transmit the data as a serialized octet array.  This will result in an overhead of over 1000% (not recommended for production applications).\r\n\r\n*Note:* This option is not supported by Firefox.\r\n\r\n### Events\r\n\r\nInstances of the `SocketIOFileUpload` object implement the [W3C `EventTarget` interface](http://www.w3.org/wiki/DOM/domcore/EventTarget).  This means that you can do:\r\n\r\n* `instance.addEventListener(\"type\", callback)`\r\n* `instance.removeEventListener(\"type\", callback)`\r\n* `instance.dispatchEvent(event)`\r\n\r\nThe events are documented below.\r\n\r\n#### choose\r\n\r\nThe user has chosen files to upload, through any of the channels you have implemented.  If you want to cancel the upload, make your callback return `false`.\r\n\r\n##### Event Properties\r\n\r\n* `event.files` an instance of a W3C FileList object\r\n\r\n#### start\r\n\r\nThis event is fired immediately following the `choose` event, but once per file.  If you want to cancel the upload for this individual file, make your callback return `false`.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` an instance of a W3C File object\r\n\r\n#### progress\r\n\r\nPart of the file has been loaded from the file system and ready to be transmitted via Socket.IO.  This event can be used to make an upload progress bar.\r\n\r\nYou can compute the percent progress via `event.bytesLoaded / event.file.size`\r\n\r\n**TODO:** A better implementation would be for the server to confirm receipt of a chunk before emitting this event.  Feel free to submit a PR if the current implementation does not fit your needs.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` an instance of a W3C File object\r\n* `event.bytesLoaded` the number of bytes that have been loaded into memory\r\n* `event.name` the filename to which the server saved the file\r\n\r\n#### load\r\n\r\nA file has been loaded into an instance of the HTML5 FileReader object and has been transmitted through Socket.IO.  We are awaiting a response from the server about whether the upload was successful; when we receive this response, a `complete` event will be dispatched.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` an instance of a W3C File object\r\n* `event.reader` an instance of a W3C FileReader object\r\n* `event.name` the filename to which the server saved the file\r\n\r\n#### complete\r\n\r\nThe server has received our file.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` an instance of a W3C File object\r\n* `event.success` true if the server-side implementation ran without error; false otherwise\r\n* `event.detail` The value of `file.clientDetail` on the server side.  Properties may be added to this object literal during any event on the server side.\r\n\r\n#### error\r\n\r\nThe server encountered an error.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` an instance of a W3C File object\r\n* `event.message` the error message\r\n* `event.code` the error code, if available\r\n\r\n## Server-Side API\r\n\r\nThe server-side interface is contained within an NPM module.  Require it with:\r\n\r\n    var SocketIOFileUpload = require(\"socketio-file-upload\");\r\n\r\n### Static Properties and Methods\r\n\r\n#### SocketIOFileUpload.listen(app)\r\n\r\nIf you are using an HTTP server in Node, pass it into this method in order for the client-side JavaScript file to be served.\r\n\r\n    var app = http.createServer( /* your configurations here */ ).listen(80);\r\n    SocketIOFileUpload.listen(app);\r\n\r\n#### SocketIOFileUpload.router\r\n\r\nIf you are using Connect-based middleware like Express, pass this value into the middleware.\r\n\r\n    var app = express()\r\n                .use(SocketIOFileUpload.router)\r\n                .use( /* your other middleware here */ )\r\n                .listen(80);\r\n\r\n### Public Properties and Methods\r\n\r\n#### instance.listen(socket)\r\n\r\nListen for uploads occuring on this Socket.IO socket.\r\n\r\n    io.sockets.on(\"connection\", function(socket){\r\n        var uploader = new SocketIOFileUpload();\r\n        uploader.listen(socket);\r\n    });\r\n\r\n#### instance.dir = \"/path/to/upload/directory\"\r\n\r\nIf specified, the module will attempt to save uploaded files in this directory.  The module will inteligently suffix numbers to the uploaded filenames until name conflicts are resolved.  It will also sanitize the filename to help prevent attacks.\r\n\r\nThe last-modified time of the file might be retained from the upload.  If this is of high importance to you, I recommend performing some tests, and if it does not meet your needs, submit an issue or a pull request.\r\n\r\n#### instance.mode = \"0666\"\r\n\r\nUse these UNIX permissions when saving the uploaded file.  Defaults to `0666`.\r\n\r\n#### instance.maxFileSize = null\r\n\r\nThe maximum file size, in bytes, to write to the disk.  If file data is received from the client that exceeds this bound, the data will not be written to the disk and an \"error\" event will be thrown.  Defaults to `null`, in which no maximum file size is enforced.\r\n\r\nNote that the other events like \"progress\", \"complete\", and \"saved\" will still be emitted even if the file's maximum allowed size had been exceeded.  However, in those events, `event.file.success` will be false.\r\n\r\n### Events\r\n\r\nInstances of `SocketIOFileUpload` implement [Node's `EventEmitter` interface](http://nodejs.org/api/events.html#events_class_events_eventemitter).  This means that you can do:\r\n\r\n* `instance.on(\"type\", callback)`\r\n* `instance.removeListener(\"type\", callback)`\r\n* `instance.emit(\"type\", event)`\r\n* et cetera.\r\n\r\nThe events are documented below.\r\n\r\n#### start\r\n\r\nThe client has started the upload process.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` An object containing the file's `name`, `mtime`, `encoding`, `meta`, `success`, `bytesLoaded`, and `id`.\r\n    *Note:* `encoding` is either \"text\" if the file is being transmitted as plain text or \"octet\" if it is being transmitted using an ArrayBuffer.  *Note:* In the \"progress\", \"complete\", \"saved\", and \"error\" events, if you are letting the module save the file for you, the file object will contain two additional properties: `base`, the new base name given to the file, and `pathName`, the full path at which the uploaded file was saved.\r\n\r\n#### progress\r\n\r\nData has been received from the client.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` The same file object that would have been passed during the `start` event earlier.\r\n* `event.buffer` A buffer containing the data received from the client\r\n\r\n#### complete\r\n\r\nThe transmission of a file is complete.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` The same file object that would have been passed during the `start` event earlier.\r\n* `event.interrupt` true if the client said that the data was interrupted (not completely sent); false otherwise\r\n\r\n#### saved\r\n\r\nA file has been saved.  It is recommended that you check `event.file.success` to tell whether or not the file was saved without errors.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` The same file object that would have been passed during the `start` event earlier.\r\n\r\n#### error\r\n\r\nAn error was encountered in the saving of the file.\r\n\r\n##### Event Properties\r\n\r\n* `event.file` The same file object that would have been passed during the `start` event earlier.\r\n* `event.error` The I/O error that was encountered.\r\n\r\n## Adding Meta Data\r\n\r\nIt is sometimes useful to add metadata to a file prior to uploading the file.  You may add metadata to a file on the client side by setting the `file.meta` property on the File object during the \"choose\" or \"start\" events.  You may also add metadata to a file on the server side by setting the `file.clientDetail` property on the fileInfo object during any of the server-side events.\r\n\r\n### Client to Server Meta Data\r\n\r\nTo add meta data to an individual file, you can listen on the \"start\" event as shown below.\r\n\r\n```javascript\r\n// client side\r\nsiofu.addEventListener(\"start\", function(event){\r\n    event.file.meta.hello = \"world\";\r\n});\r\n```\r\n\r\nThe data is then available on the server side as follows.\r\n\r\n```javascript\r\n// server side\r\nuploader.on(\"saved\", function(event){\r\n    console.log(event.file.meta.hello);\r\n});\r\n```\r\n\r\nYou can also refer back to your meta data at any time on the client side by referencing the same `event.file.meta` object literal.\r\n\r\n### Server to Client Meta Data\r\n\r\nYou can add meta data on the server.  The meta data will be available to the client on the \"complete\" event on the client as shown below.\r\n\r\n```javascript\r\n// server side\r\nsiofuServer.on(\"saved\", function(event){\r\n    event.file.clientDetail.hello = \"world\";\r\n});\r\n```\r\n\r\nThe information saved in `event.file.clientDetail` will be available in `event.detail` on the client side.\r\n\r\n```javascript\r\n// client side\r\nsiofu.addEventListener(\"complete\", function(event){\r\n    console.log(event.detail.hello);\r\n});\r\n```\r\n\r\n## Example\r\n\r\nThis example assumes that you are running your application via the Connect middleware, including Express.  If you are using a middleware that is not Connect-based or Node-HTTP-based, download the `client.js` file from the project repository and serve it on the path `/siofu/client.js`.  Alternatively, you may contribute an adapter for your middleware to this project and submit a pull request.\r\n\r\n### Server Code: app.js\r\n\r\n    // Require the libraries:\r\n    var SocketIOFileUpload = require('socketio-file-upload'),\r\n        socketio = require('socket.io'),\r\n        express = require('express');\r\n\r\n    // Make your Express server:\r\n    var app = express()\r\n        .use(SocketIOFileUpload.router)\r\n        .use(express.static(__dirname + \"/public\"))\r\n        .listen(80);\r\n\r\n    // Start up Socket.IO:\r\n    var io = socketio.listen(app);\r\n    io.sockets.on(\"connection\", function(socket){\r\n\r\n        // Make an instance of SocketIOFileUpload and listen on this socket:\r\n        var uploader = new SocketIOFileUpload();\r\n        uploader.dir = \"/srv/uploads\";\r\n        uploader.listen(socket);\r\n\r\n        // Do something when a file is saved:\r\n        uploader.on(\"saved\", function(event){\r\n            console.log(event.file);\r\n        });\r\n\r\n        // Error handler:\r\n        uploader.on(\"error\", function(event){\r\n            console.log(\"Error from uploader\", event);\r\n        });\r\n    });\r\n\r\n### Client Code: public/index.html\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n    <title>Upload Files</title>\r\n    <script src=\"/siofu/client.js\"></script>\r\n    <script src=\"/socket.io/socket.io.js\"></script>\r\n\r\n    <script type=\"text/javascript\">\r\n    document.addEventListener(\"DOMContentLoaded\", function(){\r\n\r\n        // Initialize instances:\r\n        var socket = io.connect();\r\n        var siofu = new SocketIOFileUpload(socket);\r\n\r\n        // Configure the three ways that SocketIOFileUpload can read files:\r\n        document.getElementById(\"upload_btn\").addEventListener(\"click\", siofu.prompt, false);\r\n        siofu.listenOnInput(document.getElementById(\"upload_input\"));\r\n        siofu.listenOnDrop(document.getElementById(\"file_drop\"));\r\n\r\n        // Do something on upload progress:\r\n        siofu.addEventListener(\"progress\", function(event){\r\n            var percent = event.bytesLoaded / event.file.size * 100;\r\n            console.log(\"File is\", percent.toFixed(2), \"percent loaded\");\r\n        });\r\n\r\n        // Do something when a file is uploaded:\r\n        siofu.addEventListener(\"complete\", function(event){\r\n            console.log(event.success);\r\n            console.log(event.file);\r\n        });\r\n\r\n    }, false);\r\n    </script>\r\n\r\n    </head>\r\n    <body>\r\n\r\n    <p><button id=\"upload_btn\">Prompt for File</button></p>\r\n    <p><label>Choose File: <input type=\"file\" id=\"upload_input\"/></label></p>\r\n    <div id=\"file_drop\" dropzone=\"copy\" title=\"drop files for upload\">Drop File</div>\r\n\r\n    </body>\r\n    </html>\r\n\r\n## Future Work\r\n\r\nFirst, I'm aware that this module currently lacks unit tests (mocha, etc).  This is a problem that should be solved.  I'm willing to accept PRs that add unit tests, or else one of these days when I have extra time I'll see if I can add them myself.\r\n\r\nIn addition, the following features would be useful for the module to support.\r\n\r\n1. Allow input of a file URL rather than uploading a file from your computer or mobile device.\r\n2. Have the server confirm receipt of a chunk before firing the \"progress\" event on the client side.\r\n\r\nAs always PRs are welcome.\r\n",
  "bugs": {
    "url": "https://github.com/vote539/socketio-file-upload/issues"
  },
  "_id": "socketio-file-upload@0.4.1",
  "dist": {
    "shasum": "95ca90a9a848a76cc5615791bba51890e26ead7d"
  },
  "_from": "socketio-file-upload@",
  "_resolved": "https://registry.npmjs.org/socketio-file-upload/-/socketio-file-upload-0.4.1.tgz"
}
